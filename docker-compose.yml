version: "3.7"
services:

  emby:
    container_name: emby
    restart: always
    image: emby/embyserver:beta
    volumes:
      - ${USERDIR}/docker/emby:/config
      - /tank/Video:/tank/Video
      - /tank/Music:/tank/Music
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "8096:8096/tcp"
    environment:
      - UID=${PUID}
      - GID=${PGID}
      - TZ=${TZ}
      - GIDLIST=${PGID},44
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.emby.rule=Host(`media.${DOMAINNAME}`,`emby.${DOMAINNAME}`)
      - traefik.http.routers.emby.entrypoints=https
      - traefik.http.routers.emby.tls=true
      - traefik.http.routers.emby.tls.options=default
      - traefik.http.routers.emby.middlewares=securityheaders
      - traefik.http.services.emby.loadbalancer.server.port=8096
      - traefik.docker.network=traefik_proxy

  wireguard:
    container_name: wireguard
    restart: always
    image: linuxserver/wireguard
    volumes:
      - ${USERDIR}/docker/wireguard:/config
      - ${USERDIR}/docker/shared:/shared
      - /lib/modules:/lib/modules
    ports:
      - 9091:9091
      - 51000:51000/udp
      - 51000:51000
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      - traefik_proxy
      - default
    labels:
      - com.centurylinklabs.watchtower.enable=false
      
  traefik:
    hostname: traefik
    image: traefik:latest
    container_name: traefik
    restart: always
    domainname: ${DOMAINNAME}
    networks:
      - default
      - traefik_proxy
    ports:
      - "80:80"
      - "443:443"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    command:
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --providers.docker
      - --providers.file.directory=/rules
      - --providers.docker.exposedbydefault=false
      - --global.sendAnonymousUsage=true
      - --api
      - --log=true
      - --log.level=INFO
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=1000
      - --accessLog.filters.statusCodes=400-499
      - --certificatesresolvers.cloudflare.acme.email=${NEIL_EMAIL}
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53'
      - --certificatesresolvers.cloudflare.acme.storage=/acme.json'
      #- '--certificatesresolvers.cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory'
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=cloudflare
      - traefik.http.routers.traefik.tls.options=default
      - traefik.http.routers.traefik.middlewares=auth,securityheaders
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.domains[0].main=${DOMAINNAME}
      - traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAINNAME}
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.auth.basicauth.users=${HTTP_USERNAME}:${HTTP_PASSWORD}
      - traefik.http.middlewares.sslredirect.redirectscheme.scheme=https
      - traefik.http.middlewares.securityheaders.headers.forceSTSHeader=true
      - traefik.http.middlewares.securityheaders.headers.stsPreload=true
      - traefik.http.middlewares.securityheaders.headers.stsSeconds=315360000
      - traefik.http.middlewares.securityheaders.headers.stsIncludeSubdomains=true
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.middlewares=sslredirect
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/docker/traefik/rules:/rules 
      - $USERDIR/docker/traefik/letsencrypt/acme.json:/acme.json
      - $USERDIR/docker/traefik/traefik.log:/traefik.log 
      - $USERDIR/docker/shared:/shared

  transmission:
    image: linuxserver/transmission:version-3.00-r8
    # image: linuxserver/transmission
    container_name: transmission
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - TRANSMISSION_WEB_HOME=/config/transmission-web-control-1.6.1-update1/src
      - USER=${TRANSMISSION_USER}
      - PASS=${TRANSMISSION_PASS}
    volumes:
      - ${USERDIR}/docker/transmission-ls:/config
      - ${USERDIR}/TransmissionDL:/downloads
      - /tank/Tranmission:/tank/Tranmission
    depends_on:
      - wireguard
    network_mode: service:wireguard
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.rule=Host(`transmission.${DOMAINNAME}`)
      - traefik.http.routers.transmission.entrypoints=https
      - traefik.http.routers.transmission.tls=true
      - traefik.http.routers.transmission.tls.options=default
      - traefik.http.routers.transmission.middlewares=securityheaders
      - traefik.http.services.transmission.loadbalancer.server.port=9091
      - traefik.docker.network=traefik_proxy

  sonarr:
    container_name: sonarr
    image: ghcr.io/hotio/sonarr:v4
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/sonarr:/config
      - /tank/Video:/video
      - ${USERDIR}/TransmissionDL:/downloads
    depends_on:
      - wireguard
    network_mode: service:wireguard
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAINNAME}`)
      - traefik.http.routers.sonarr.entrypoints=https
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.options=default
      - traefik.http.routers.sonarr.middlewares=securityheaders
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - traefik.docker.network=traefik_proxy

  radarr:
    container_name: radarr
    image: ghcr.io/hotio/radarr:latest
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/radarr:/config
      - /tank/Video:/video
      - ${USERDIR}/TransmissionDL:/downloads
    depends_on:
      - wireguard
    network_mode: service:wireguard
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAINNAME}`)
      - traefik.http.routers.radarr.entrypoints=https
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.options=default
      - traefik.http.routers.radarr.middlewares=auth,securityheaders
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - traefik.docker.network=traefik_proxy

  jackett:
    container_name: jackett
    image: ghcr.io/hotio/jackett:latest
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/jackett:/config
    depends_on:
      - wireguard
    network_mode: service:wireguard
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.rule=Host(`jackett.${DOMAINNAME}`)
      - traefik.http.routers.jackett.entrypoints=https
      - traefik.http.routers.jackett.tls=true
      - traefik.http.routers.jackett.tls.options=default
      - traefik.http.routers.jackett.middlewares=auth,securityheaders
      - traefik.http.services.jackett.loadbalancer.server.port=9117
      - traefik.docker.network=traefik_proxy

  autobrr:
    image: ghcr.io/autobrr/autobrr:latest
    container_name: autobrr
    restart: always
    networks:
      - proxy
    volumes:
      - ${USERDIR}/docker/autobrr:/config
    networks:
      - traefik_proxy
    user: ${PUID}:${PGID}
    labels:
      - traefik.enable=true
      - traefik.http.routers.autobrr.rule=Host(`autobrr.${DOMAINNAME}`)
      - traefik.http.routers.autobrr.entrypoints=https
      - traefik.http.routers.autobrr.tls=true
      - traefik.http.routers.autobrr.tls.options=default
      - traefik.http.routers.autobrr.middlewares=securityheaders
      - traefik.http.services.autobrr.loadbalancer.server.port=7474
      - traefik.docker.network=traefik_proxy

  unpackerr:
    container_name: unpackerr
    image: ghcr.io/hotio/unpackerr:latest
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/unpackerr:/config
      - ${USERDIR}/TransmissionDL:/downloads
    networks:
      - traefik_proxy

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - ${USERDIR}/docker/shared:/shared
    environment:
      - TZ=${TZ}
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAINNAME}`)
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.options=default
      - traefik.http.routers.portainer.middlewares=securityheaders
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.docker.network=traefik_proxy

  duplicati:
    image: linuxserver/duplicati
    container_name: duplicati
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/duplicati:/config
      - ${USERDIR}:/source
    networks:
      - traefik_proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.duplicati.rule=Host(`duplicati.${DOMAINNAME}`)
      - traefik.http.routers.duplicati.entrypoints=https
      - traefik.http.routers.duplicati.tls=true
      - traefik.http.routers.duplicati.tls.options=default
      - traefik.http.routers.duplicati.middlewares=auth,securityheaders
      - traefik.http.services.duplicati.loadbalancer.server.port=8200
      - traefik.docker.network=traefik_proxy

  watchtower:
    container_name: watchtower
    restart: always
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup

  cloudflare-ddns:
    container_name: cloudflare-ddns
    restart: always
    image: joshuaavalon/cloudflare-ddns
    environment:
      - ZONE=${DOMAINNAME}
      - HOST=${DOMAINNAME}
      - EMAIL=${CLOUDFLARE_EMAIL}
      - API=${CLOUDFLARE_API_KEY}

  homeassistant:
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:stable
    volumes:
      - ${USERDIR}/docker/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    privileged: true
    networks:
      traefik_proxy:
      nc_macvlan:
        ipv4_address: ${STATICIP_HA}
    labels:
      - traefik.enable=true
      - traefik.http.routers.homeassistant.rule=Host(`homeassistant.${DOMAINNAME}`)
      - traefik.http.routers.homeassistant.entrypoints=https
      - traefik.http.routers.homeassistant.tls=true
      - traefik.http.routers.homeassistant.tls.options=default
      - traefik.http.routers.homeassistant.middlewares=securityheaders
      - traefik.http.services.homeassistant.loadbalancer.server.port=8123
      - traefik.docker.network=traefik_proxy

  plex:
    container_name: plex
    image: linuxserver/plex:latest
    volumes:
      - ${USERDIR}/docker/plex:/config
      - /tank/Video:/tank/Video
      - /tank/Music:/tank/Music
      - ${USERDIR}/docker/shared:/shared
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - PLEX_CLAIM=claim-CNvu3qr4Yebz-s2vVwTy
    devices:
       - /dev/dri:/dev/dri
    networks:
      traefik_proxy:
      nc_macvlan:
        ipv4_address: ${STATICIP_PLEX}
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.rule=Host(`plex.${DOMAINNAME}`)
      - traefik.http.routers.plex.entrypoints=https
      - traefik.http.routers.plex.tls=true
      - traefik.http.routers.plex.tls.options=default
      - traefik.http.routers.plex.middlewares=securityheaders
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - traefik.docker.network=traefik_proxy

networks:
  traefik_proxy:
    external: true
    name: traefik_proxy
  nc_macvlan:
    name: nc_macvlan
    external: true
  default:
    driver: bridge